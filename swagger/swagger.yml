swagger: "2.0"
info:
  description: "The protocol specification for a web of data node. The [https://github.com/webofdata/specification/blob/master/specification.md](Specification) defines a data model, serialisation format and protocol for managing and sharing data at web scale."
  version: "1.0.0"
  title: "Web Of Data - Protocol"
tags:
- name: "Management"
- name: "Synchronisation"
- name: "Query"
schemes:
- "https"
paths:

  /info:
    get:
      tags:
        - "Management"
      summary: "Returns information about this service instance"
      description: "Returns information about this service instance, including an entity which conveys on this service instance a unique identifier"
      operationId: "get-service-info"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServiceInfo"

  /stores:
    get:
      tags:
        - "Management"
      summary: Returns a list of stores
      description: "returns a list of stores"
      operationId: "get-stores"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "query"
          description: "if present tries to find the store with that id (note: not the store name)"
          required: false
          type: string
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Store"

    post:
      tags:
        - "Management"
      summary: Create a new store
      description: "Creates a new store with the name provided if and only if this name is not already in use. If no name is provided then the server MUST generate one"
      operationId: "create-store"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "Store to create"
          required: true
          schema:
            $ref: "#/definitions/Store"
      responses:
        201:
          description: "successful operation - store created"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Occurs when the store passed in the body is invalid or missing"

  /stores/{store-name}:
    get:
      tags:
        - "Management"
      summary: get store by its local store name
      description: returns a single store object or 404 not found
      operationId: get-store
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        404:
          description: "store not found"

    delete:
      tags:
        - "Management"
      summary: delete the named store, and all datasets
      description: deletes the named store or returns a 404 not found if no store of the name provided exists
      operationId: delete-store
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation - store deleted."
        404:
          description: "store not found"

    put:
      tags:
        - "Management"
      summary: updates the store entity
      description: updates the entity that represents the store
      operationId: update-store
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "New representation of the store entity"
          required: true
          schema:
            $ref: "#/definitions/Entity"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        404:
          description: "store not found"

  /stores/{store-name}/query:
    get:
      tags:
        - "Query"
      summary: Queries across the datasets of the store using the query parameters provided.
      operationId: query-store
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
        - name: "subject"
          in: "query"
          required: false
          type: "string"
        - name: "connected"
          in: "query"
          required: false
          type: "string"
          description: "If provided indicates that the query should find all subjects connected to the identified subject. Value is either * or a URI."
        - name: "incoming"
          in: "query"
          required: false
          type: "boolean"
          description: "Used in combination with connected to indicate if the subject is the source or the target of the connections to be found. Default value is false."
        - name: "dataset"
          in: "query"
          required: false
          type: "string"
          description: "Repeatable parameter that indicates which datasets should be queried. If no values are specified then all datasets are used."
        - name: "nextdata"
          in: "query"
          required: false
          type: "string"
          description: "Can not be used with any other query parameters. The value of this query parameter should be values returned as the x-wod-next-data header from a prior query. The server is responsible for encoding into the token enough information to provide the next set of results."
        - name: "take"
          in: "query"
          required: false
          type: "integer"
          description: "A request to the server for the maximum number of items to returned. The server MAY ignore this."
      responses:
        200:
          description: "successful operation"
          headers:
            x-wod-next-data:
              description: "if present indicates to the client that there is more data to be retrieved. Use the value of this header as the value of the 'nextdata' query parameter to retrieve more data."
              type: "string"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entity"
        404:
          description: "Store or dataset not found"


  /stores/{store-name}/datasets:
    get:
      tags:
        - "Management"
      summary: "gets a list of datasets in the named store"
      description: "returns a single store object or 404 if the store does not exist"
      operationId: "get-datasets"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dataset"
        404:
          description: "Store not found"

    post:
      tags:
        - "Management"
      summary: Create a new dataset
      description: "Creates a new dataset with the name provided if and only if this name is not already taken in this named store. If no name is provided the server MUST generate one."
      operationId: "create-dataset"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "unique store name for this service endpoint"
          required: true
          type: "string"
        - name: "body"
          in: "body"
          description: "Dataset to create"
          required: true
          schema:
            $ref: "#/definitions/Dataset"
      responses:
        201:
          description: "successful operation - dataset created"
          schema:
            $ref: "#/definitions/Dataset"
        404:
          description: "Store not found"
        400:
          description: "Occurs when the dataset passed in the body is invalid or missing"

  /stores/{store-name}/datasets/{dataset-name}:
    get:
      tags:
        - "Management"
      summary: "Gets the datasets in the named store"
      description: "Returns a list of dataset objects or 404 if the store does not exist"
      operationId: "get-dataset"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "dataset-name"
          in: "path"
          description: "dataset name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Dataset"
        404:
          description: "Invalid store name or dataset name"

    put:
      tags:
        - "Management"
      summary: Update dataset
      description: "Update the entity for the dataset"
      operationId: "update-dataset"
      produces:
        - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "New dataset entity data"
        required: true
        schema:
          $ref: "#/definitions/Entity"
      responses:
        200:
          description: "successful operation - dataset updated"
          schema:
            $ref: "#/definitions/Dataset"
        400:
          description: "Occurs when the dataset passed in the body is invalid or missing"
        404:
          description: "Store or dataset not found"

    delete:
      tags:
        - "Management"
      summary: Delete dataset
      description: "Delete the dataset"
      operationId: "delete-dataset"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation - dataset deleted"
        404:
          description: "Store or dataset not found"

  /stores/{store-name}/datasets/{dataset-name}/entities/partitions:
    get:
      tags:
        - "Management"
      summary: "Get partitions for reading the dataset in parallel"
      description: "Returns a list of tokens to be used with the x-wod-next-data query parameter of the get-entities operation."
      operationId: "get-partitions"
      produces:
      - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        type: "string"
        description: "If provided it indicates to the server the desired number of partitions. However, the server is free to decide the partition count."
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
        404:
          description: "Store or dataset not found"

  /stores/{store-name}/datasets/{dataset-name}/entities:
    get:
      tags:
        - "Management"
      summary: "Get entities in the dataset"
      description: "Returns the entities in the specified dataset. Can also be used to locate a specific entity using the id query parameter."
      operationId: "get-entities"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "dataset-name"
          in: "path"
          description: "dataset name"
          required: true
          type: "string"
        - name: "id"
          in: "query"
          type: "string"
          description: "If provided it must be a full uri and it will limit the number of entities to either 0 or 1, depending if an entity with that id exists in the dataset"
        - name: "nextdata"
          in: "query"
          type: "string"
          description: "A token used to retrieve more data. Tokens are provided as a result of calling get-entities-partitions or as a value in continuation entity of a response."
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entity"
        404:
          description: "Store or dataset not found"

    delete:
      tags:
        - "Management"
      summary: "Delete all entities in the dataset"
      description: "Deletes all entities in the dataset but not the dataset itself"
      operationId: "delete-entities"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          description: "store name"
          required: true
          type: "string"
        - name: "dataset-name"
          in: "path"
          description: "dataset name"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"

    post:
      tags:
        - "Management"
      summary: "Add, replaces or deletes entities in the dataset"
      description: "Adds, replaces or deletes all the entities in the specified dataset with those provided in the body."
      operationId: "store-entities"
      produces:
      - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "entities"
        in: "body"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Entity"
      responses:
        200:
          description: "successful operation"

  /stores/{store-name}/datasets/{dataset-name}/changes:
    get:
      tags:
        - "Synchronisation"
      summary: "Get dataset changes"
      description: "Returns all the changes in the specified dataset. Use of the since parameter restricts the set of values returned."
      operationId: "get-changes"
      produces:
        - "application/json"
      parameters:
        - name: "store-name"
          in: "path"
          type: "string"
          required: true
        - name: "dataset-name"
          in: "path"
          type: "string"
          required: true
        - name: "nextdata"
          in: "query"
          description: "A token that the service interprets in order to only return changes that have occurred since that point. These or tokens are provided by a call to get-changes-partitions or as the value in the continuation entity in responses to this operation."
          required: false
          type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Wod-Change-Count:
              type: integer
              description: "If present indicates the number of changes that server has at this point in time in the specified dataset."          
            X-wod-full-sync:
              description: "If present indicates that a full sync is required. This means that all local data should be deleted and the new data arriving put in its place."
              type: boolean
              default: false
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Entity"        
        400:
          description: "Invalid since token"

  /stores/{store-name}/datasets/{dataset-name}/changes/partitions:
    get:
      tags:
        - "Synchronisation"
      summary: "Get partitions for reading the changes to a dataset in parallel"
      description: "Returns a list of tokens to be used with the x-wod-next-data query parameter of the get-changes operation."
      operationId: "get-changes-partitions"
      produces:
      - "application/json"
      parameters:
      - name: "store-name"
        in: "path"
        description: "store name"
        required: true
        type: "string"
      - name: "dataset-name"
        in: "path"
        description: "dataset name"
        required: true
        type: "string"
      - name: "count"
        in: "query"
        type: "string"
        description: "If provided it indicates to the server the desired number of partitions. However, the server is free to decide the partition count."
      responses:
        200:
          description: "successful operation"
          headers:
            X-RateLimit-Limit:
              type: integer
              description: Request limit per hour.
          schema:
            type: "array"
            items:
              type: "string"
        404:
          description: "Store or dataset not found"


definitions:

  ServiceInfo:
    type: "object"
    properties:
      "name":
        "type": "string"
      "baseurl":
        "type": "string"
      "entity":
        "$ref": "#/definitions/Entity"

  Store:
    type: "object"
    properties:
      "name":
        "type": "string"
      "entity":
        "$ref": "#/definitions/Entity"

  Dataset:
    type: "object"
    properties:
      "name":
        "type": "string"
      "entity":
        "$ref": "#/definitions/Entity"

  Entity:
    type: "object"
    properties:
      "@id":
        type: "string"
      "@deleted":
        type: "boolean"
        default: false
      "@etag":
        type: "string"

